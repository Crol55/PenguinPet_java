/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package penguinpet;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author carlos
 */
public class Interfaz extends javax.swing.JFrame {

    boolean presioninicial = false;
//ExpresionRegular Expresiones= new ExpresionRegular();
    public static String columna[] = new String[100];
    public static int linea[]= new int[100];
    public static String numero[] = new String[100];
    public static String lexema[] = new String[100];
    public static String token[] = new String[100];
    public static String palabrareservada[] = new String[100];
    public static String tok;
    public static String lex;
    public static String line;
    public static String reservada;

    public static int contadorespecial = 1;
    int contador = 100;
    public static int conteo = 0;
    ImageIcon pinguino1 = new ImageIcon("C:\\Users\\carlos\\Documents\\NetBeansProjects\\PenguinPet\\src\\penguinpet\\tux.png");
    ImageIcon amor = new ImageIcon("C:\\Users\\carlos\\Documents\\NetBeansProjects\\PenguinPet\\src\\penguinpet\\Amor.png");
    ImageIcon latigo = new ImageIcon("C:\\Users\\carlos\\Documents\\NetBeansProjects\\PenguinPet\\src\\penguinpet\\Latigo.png");
    ImageIcon batman = new ImageIcon("C:\\Users\\carlos\\Documents\\NetBeansProjects\\PenguinPet\\src\\penguinpet\\batman.png");
    ImageIcon donas = new ImageIcon("C:\\Users\\carlos\\Documents\\NetBeansProjects\\PenguinPet\\src\\penguinpet\\donuts.png");
    ImageIcon filete = new ImageIcon("C:\\Users\\carlos\\Documents\\NetBeansProjects\\PenguinPet\\src\\penguinpet\\filete.png");
    ImageIcon hamburguesa = new ImageIcon("C:\\Users\\carlos\\Documents\\NetBeansProjects\\PenguinPet\\src\\penguinpet\\hamburguesa.png");
    ImageIcon rushi = new ImageIcon("C:\\Users\\carlos\\Documents\\NetBeansProjects\\PenguinPet\\src\\penguinpet\\maestrorushipng.png");
    ImageIcon papa = new ImageIcon("C:\\Users\\carlos\\Documents\\NetBeansProjects\\PenguinPet\\src\\penguinpet\\papa.png");
    ImageIcon pizza = new ImageIcon("C:\\Users\\carlos\\Documents\\NetBeansProjects\\PenguinPet\\src\\penguinpet\\pizza.png");
    ImageIcon saya = new ImageIcon("C:\\Users\\carlos\\Documents\\NetBeansProjects\\PenguinPet\\src\\penguinpet\\saya.png");
    ImageIcon superpingui = new ImageIcon("C:\\Users\\carlos\\Documents\\NetBeansProjects\\PenguinPet\\src\\penguinpet\\superpenguin.png");
    ImageIcon op = new ImageIcon("C:\\Users\\carlos\\Documents\\NetBeansProjects\\PenguinPet\\src\\penguinpet\\operaciones.png");
    ImageIcon mu = new ImageIcon("C:\\Users\\carlos\\Documents\\NetBeansProjects\\PenguinPet\\src\\penguinpet\\pollo1.jpg");

    public Interfaz() {
        initComponents();
        setTitle("My Penguin Pet");
        setLocationRelativeTo(null);
    
        jLabel3.setText("Score :" + contador);
        jLabel1.setIcon(pinguino1);
        // jLabel2.setIcon(amor);
        //jLabel4.setIcon(pizza);
        //jLabel5.setIcon(latigo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(204, 204, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Crol>>");
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);
        jTextArea1.getAccessibleContext().setAccessibleName("");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 255));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("Terminal");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jMenu1.setText("File");

        jMenuItem1.setText("Tabla Tokens");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem1MousePressed(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Tabla Errores");
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem2MousePressed(evt);
            }
        });
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(41, 41, 41))
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(128, 128, 128)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(80, 80, 80))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jTextArea1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyPressed
        ExpresionRegular Expresiones = new ExpresionRegular();
        

        //System.out.println(evt.getExtendedKeyCode());
        if (evt.getExtendedKeyCode() == 8) {

            jTextArea1.setEditable(false);
        } else {
            jTextArea1.setEditable(true);
        }

        if (evt.getExtendedKeyCode() == 10) {
           
            conteo++;
            if (presioninicial == false) {
                jTextArea1.setText(jTextArea1.getText() + "\n");
                presioninicial = true;
                System.out.println("la linea va por" + conteo);
            }
            System.out.println("la linea va por" + conteo);
            // JOptionPane.showMessageDialog(null, "se esta presionando enter "); 
            jTextArea1.setText(jTextArea1.getText() + "Crol>>");
            // jTextArea1.isEditable();
            String area = jTextArea1.getText();
            String lineas[] = area.split("Crol>>");
            // System.out.println("lo almacenado es "+area);
            System.out.println("la linea es " + lineas[conteo]);
            int sig = Expresiones.reconocimiento(lineas[conteo]);

            // System.out.println("EL NUMERO EN LAS EXPRESIONES ES   "+sig);
            // for (int i = 0; i < lineas.length; i++) {
            switch (sig) {
                case 1: {
                    
                    tok = "15";
                    lex = "DarAmor";
                    reservada = "si";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    jLabel2.setIcon(amor);
                    contador = contador + 50;
                    jLabel3.setText("");
                    jLabel3.setText("Score: " + contador);

                    if ((contador >= 500)) {
                        jLabel1.setIcon(mu);
                        jTextArea1.setEnabled(false);
                    }
                    System.out.println("el contador especial esta en " + contadorespecial);
                    contadorespecial++;
                }
                break;
                case 2: {

                    if (Expresiones.y[0].contains("SerPapa") == true) {
                        jLabel1.setIcon(papa);
                        contador = contador + 50;
                        tok = "30";
                        lex = "SerPapa";
                        reservada = "si";
                        token[contadorespecial] = tok;
                        lexema[contadorespecial] = lex;
                        palabrareservada[contadorespecial] = reservada;
                         linea[contadorespecial]=conteo;
                        jLabel3.setText("");
                        jLabel3.setText("Score: " + contador);
                        if ((contador >= 500)) {
                            jLabel1.setIcon(mu);
                            jTextArea1.setEnabled(false);
                        }
                        contadorespecial++;
                    } else if (Expresiones.y[0].contains("SerBatman") == true) {
                        jLabel1.setIcon(null);
                        jLabel1.setIcon(batman);
                        tok = "30";
                        lex = "SerBatman";
                        reservada = "si";
                        token[contadorespecial] = tok;
                        lexema[contadorespecial] = lex;
                        palabrareservada[contadorespecial] = reservada;
                         linea[contadorespecial]=conteo;
                        contador = contador + 50;
                        jLabel3.setText("");
                        jLabel3.setText("Score: " + contador);
                        if ((contador >= 500)) {
                            jLabel1.setIcon(mu);
                            jTextArea1.setEnabled(false);
                        }
                        contadorespecial++;
                    } else if (Expresiones.y[0].contains("SerSuperPinguin") == true) {
                        jLabel1.setIcon(null);
                        jLabel1.setIcon(superpingui);
                        contador = contador + 100;
                        tok = "30";
                        lex = "SerSuperPinguin";
                        reservada = "si";
                        token[contadorespecial] = tok;
                        lexema[contadorespecial] = lex;
                        palabrareservada[contadorespecial] = reservada;
                         linea[contadorespecial]=conteo;
                        jLabel3.setText("");
                        jLabel3.setText("Score: " + contador);
                        if ((contador >= 500)) {
                            jLabel1.setIcon(mu);
                            jTextArea1.setEnabled(false);
                        }
                        contadorespecial++;
                    } else if (Expresiones.y[0].contains("SerGoku") == true) {
                        jLabel1.setIcon(null);
                        jLabel1.setIcon(saya);
                        contador = contador + 100;
                        tok = "30";
                        lex = "SerGoku";
                        reservada = "si";
                        token[contadorespecial] = tok;
                        lexema[contadorespecial] = lex;
                        palabrareservada[contadorespecial] = reservada;
                         linea[contadorespecial]=conteo;
                        jLabel3.setText("");
                        jLabel3.setText("Score: " + contador);
                        if ((contador >= 500)) {
                            jLabel1.setIcon(mu);
                            jTextArea1.setEnabled(false);
                        }
                        contadorespecial++;
                    } else if (Expresiones.y[0].contains("SerMaestroRushi") == true) {
                        jLabel1.setIcon(null);
                        jLabel1.setIcon(rushi);
                        tok = "30";
                        lex = "SerMaestroRushi";
                        reservada = "si";
                        token[contadorespecial] = tok;
                        lexema[contadorespecial] = lex;
                        palabrareservada[contadorespecial] = reservada;
                         linea[contadorespecial]=conteo;
                        contador = contador + 50;
                        jLabel3.setText("");
                        jLabel3.setText("Score: " + contador);
                        if ((contador >= 500)) {
                            jLabel1.setIcon(mu);
                            jTextArea1.setEnabled(false);
                        }
                        contadorespecial++;
                    }

                }
                break;
                case 3: {
                     tok = "10";
                    lex = "DarComida";
                    reservada = "si";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
                 //   System.out.println("pgpdsgsdgsdgsdgsdgsdggs " + Expresiones.y[1]);

                    if (Expresiones.y[1].contains("Donas") == true) {
                        tok = "10";
                        lex = "Donas";
                        reservada = "no";
                        token[contadorespecial] = tok;
                        lexema[contadorespecial] = lex;
                        palabrareservada[contadorespecial] = reservada;
                         linea[contadorespecial]=conteo;
                        jLabel4.setIcon(null);
                        jLabel4.setIcon(donas);
                        contador = contador + 20;
                        jLabel3.setText("");
                        jLabel3.setText("Score: " + contador);
                        if ((contador >= 500)) {
                            jLabel1.setIcon(mu);
                            jTextArea1.setEnabled(false);
                        }
                        contadorespecial++;
                    } else if (Expresiones.y[1].contains("Filete") == true) {
                        tok = "30";
                        lex = "Filete";
                        reservada = "no";
                        token[contadorespecial] = tok;
                        lexema[contadorespecial] = lex;
                        palabrareservada[contadorespecial] = reservada;
                         linea[contadorespecial]=conteo;
                        jLabel4.setIcon(null);
                        jLabel4.setIcon(filete);
                        contador = contador + 20;
                        jLabel3.setText("");
                        jLabel3.setText("Score: " + contador);
                        if ((contador >= 500)) {
                            jLabel1.setIcon(mu);
                            jTextArea1.setEnabled(false);
                        }
                        contadorespecial++;
                    } else if (Expresiones.y[1].contains("Hamburguesa") == true) {
                        tok = "30";
                        lex = "Hamburguesa";
                        reservada = "no";
                        token[contadorespecial] = tok;
                        lexema[contadorespecial] = lex;
                        palabrareservada[contadorespecial] = reservada;
                         linea[contadorespecial]=conteo;
                        jLabel4.setIcon(null);
                        jLabel4.setIcon(hamburguesa);
                        contador = contador + 20;
                        jLabel3.setText("");
                        jLabel3.setText("Score: " + contador);
                        if ((contador >= 500)) {
                            jLabel1.setIcon(mu);
                            jTextArea1.setEnabled(false);
                        }
                        contadorespecial++;
                    } else if (Expresiones.y[1].contains("Pizza") == true) {
                        tok = "30";
                        lex = "Pizza";
                        reservada = "no";
                        token[contadorespecial] = tok;
                        lexema[contadorespecial] = lex;
                        palabrareservada[contadorespecial] = reservada;
                         linea[contadorespecial]=conteo;
                        jLabel4.setIcon(null);
                        jLabel4.setIcon(pizza);
                        contador = contador + 20;
                        jLabel3.setText("");
                        jLabel3.setText("Score: " + contador);
                        if ((contador >= 500)) {
                            jLabel1.setIcon(mu);
                            jTextArea1.setEnabled(false);
                        }
                        contadorespecial++;

                    }
                }
                break;
                case 4: {
                    tok = "20";
                    lex = "DarLatigo";
                    reservada = "si";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                     linea[contadorespecial]=conteo;
                     contadorespecial++;
                    if (Expresiones.y[1].contains("Duro") == true) {
                        //  System.out.println("se latigueo duro");
                        tok = "35";
                        lex = "Duro";
                        reservada = "si";
                        token[contadorespecial] = tok;
                        lexema[contadorespecial] = lex;
                        palabrareservada[contadorespecial] = reservada;
                         linea[contadorespecial]=conteo;
                        jLabel5.setIcon(null);
                        jLabel5.setIcon(latigo);
                        contador = contador - 50;
                        jLabel3.setText("");
                        jLabel3.setText("Score: " + contador);
                        if (contador <= 0) {
                            jLabel1.setIcon(mu);
                            jTextArea1.setEnabled(false);
                        }
                        contadorespecial++;
                    } else if (Expresiones.y[1].contains("Suave") == true) {
                        tok = "30";
                        lex = "Suave";
                        reservada = "si";
                        token[contadorespecial] = tok;
                        lexema[contadorespecial] = lex;
                        palabrareservada[contadorespecial] = reservada;
                         linea[contadorespecial]=conteo;
                        contador = contador - 15;
                        jLabel3.setText("");
                        jLabel3.setText("Score: " + contador);

                        jLabel5.setIcon(null);
                        jLabel5.setIcon(latigo);
                        //DarLatigo Duro
                        if (contador <= 0) {
                            jLabel1.setIcon(mu);
                            jTextArea1.setEnabled(false);
                        }
                        contadorespecial++;
                    }
                }
                break;
                case 5: {
                    tok = "50";
                    lex = "HacerSuma";
                    reservada = "si";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                     linea[contadorespecial]=conteo;
                      contadorespecial++;
                      
                    tok = "65";
                    lex =Expresiones.cambio[0];
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
                    
                     tok = "20";
                    lex =",";
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
                    
                    tok = "65";
                    lex =Expresiones.cambio[1];
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
                    
                    jLabel6.setIcon(op);
                    jTextArea1.setText(jTextArea1.getText() + "El resultado de la Suma es: " + Expresiones.resultado + "\n" + "Crol>>");
                    contador = contador + 50;
                    jLabel3.setText("");
                    jLabel3.setText("Score: " + contador);
                    if ((contador >= 500)) {
                        jLabel1.setIcon(mu);
                        jTextArea1.setEnabled(false);
                    }
                   
                    conteo++;
                }
                break;
                case 6: {
                    tok = "50";
                    lex = "HacerResta";
                    reservada = "si";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                     linea[contadorespecial]=conteo;
                     contadorespecial++;
                     
                     tok = "65";
                    lex =Expresiones.cambio[0];
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
                    
                     tok = "20";
                    lex =",";
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
                    
                    tok = "65";
                    lex =Expresiones.cambio[1];
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
                    
                    contador = contador + 50;
                    jLabel3.setText("");
                    jLabel3.setText("Score: " + contador);

                    jLabel6.setIcon(op);
                    jTextArea1.setText(jTextArea1.getText() + "El resultado de la resta es: " + Expresiones.resultado + "\n" + "Crol>>");
                    if ((contador >= 500)) {
                        jLabel1.setIcon(mu);
                        jTextArea1.setEnabled(false);
                    }
                    
                    conteo++;
                }
                break;
                case 7: {
                    tok = "50";
                    lex = "HacerProd";
                    reservada = "si";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                     linea[contadorespecial]=conteo;
                     contadorespecial++;
                     
                     tok = "65";
                    lex =Expresiones.cambio[0];
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
                    
                    tok = "20";
                    lex =",";
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
                    
                    tok = "65";
                    lex =Expresiones.cambio[1];
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
                     
                    jLabel6.setIcon(op);
                    jTextArea1.setText(jTextArea1.getText() + "El resultado del producto es: " + Expresiones.resultado + "\n" + "Crol>>");
                    contador = contador + 50;
                    jLabel3.setText("");
                    jLabel3.setText("Score: " + contador);
                    if ((contador >= 500)) {
                        jLabel1.setIcon(mu);
                        jTextArea1.setEnabled(false);
                    }
                    
                    conteo++;
                }
                break;
                case 8: {
                    tok = "50";
                    lex = "HacerDiv";
                    reservada = "si";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                     linea[contadorespecial]=conteo;
                     contadorespecial++;
                     
                     tok = "65";
                    lex =Expresiones.cambio[0];
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
                    
                     tok = "20";
                    lex =",";
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
                    
                    tok = "65";
                    lex =Expresiones.cambio[1];
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
                    jLabel6.setIcon(op);
                    jTextArea1.setText(jTextArea1.getText() + "El resultado de la Division es: " + Expresiones.resultado + "\n" + "Crol>>");
                    contador = contador + 50;
                    jLabel3.setText("");
                    jLabel3.setText("Score: " + contador);
                    if ((contador >= 500)) {
                        jLabel1.setIcon(mu);
                        jTextArea1.setEnabled(false);
                    }
                   
                    conteo++;
                }
                break;
                case 9: {
            tok = "55";
                    lex = "HacerConcat";
                    reservada = "si";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                     linea[contadorespecial]=conteo;
                     contadorespecial++;
            tok = "40";
                    lex = "("+Expresiones.variable3[0];
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;         
                    contadorespecial++;
              tok = "20";
                    lex =",";
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
            tok = "40";
                    lex = Expresiones.variable3[1]+")";
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;         
                    contadorespecial++;  
                    
                    jTextArea1.setText(jTextArea1.getText() + "El resultado de concatenacion: " + Expresiones.qt + "Crol>>");
                    
                
                    conteo++;
                    contador = contador + 35;
                    jLabel3.setText("");
                    jLabel3.setText("Score: " + contador);   
                    if ((contador >= 500)) {
                        jLabel1.setIcon(mu);
                        jTextArea1.setEnabled(false);
                    }
                    
                }
                break;
                case 10: {
                    tok = "60";
                    lex = "HacerConcatInv";
                    reservada = "si";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                     linea[contadorespecial]=conteo;
                   
                    contadorespecial++;
                    tok = "40";
                    lex = "("+Expresiones.variable3[0];
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;         
                    contadorespecial++;
              tok = "20";
                    lex =",";
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;
                    contadorespecial++;
            tok = "40";
                    lex = Expresiones.variable3[1]+")";
                    reservada = "no";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                    linea[contadorespecial]=conteo;         
                    contadorespecial++;  
                    
                    
                    
                     jTextArea1.setText(jTextArea1.getText() + "El resultado de concatenacion: " +Expresiones.rt+ "Crol>>");
                    conteo++;
                    contador = contador + 35;
                    jLabel3.setText("");
                    jLabel3.setText("Score: " + contador);

                    if ((contador >= 500)) {
                        jLabel1.setIcon(mu);
                        jTextArea1.setEnabled(false);
                    }
                    
                }
                break;
                case 11: {
                    reporte rep = new reporte();
                    tok = "100";// matar pinguino
                    lex = "Kill-p";
                    reservada = "si";
                    token[contadorespecial] = tok;
                    lexema[contadorespecial] = lex;
                    palabrareservada[contadorespecial] = reservada;
                     linea[contadorespecial]=conteo;
                    contador = -10;
                    jLabel3.setText("Score: " + contador);
                    jLabel1.setIcon(mu);
                    jTextArea1.setEnabled(false);
                    contadorespecial++;
                   
                }
                break;
                case 20: {

                    System.out.println("error lexico en suma,resta,multiplicacion,odivision");
                }
            }//}

            //System.out.println("EL VALOR DE LA VARIABLE DE ACEPTACION ES "+sig);
        }
    }//GEN-LAST:event_jTextArea1KeyPressed

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
        
    }//GEN-LAST:event_jMenuItem1MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MousePressed
       if(evt.getButton()==1){
           reporte r= new reporte();
            r.reporteExpresion();
       }
    }//GEN-LAST:event_jMenuItem1MousePressed

    private void jMenuItem2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MousePressed
       Errores er= new Errores();
        if(evt.getButton()==1){
        er.Errores();
       }
    }//GEN-LAST:event_jMenuItem2MousePressed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
                // ExpresionRegular Expresiones= new ExpresionRegular();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    public javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    public javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
